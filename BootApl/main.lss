
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00001c00  00001c00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00001ee8  00001ee8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  00001ee8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000041  00800060  00001ee8  0000035c  2**0
                  ALLOC
  4 .stab         00000cc0  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000fda  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00001c00 <__ctors_end>:
    1c00:	11 24       	eor	r1, r1
    1c02:	1f be       	out	0x3f, r1	; 63
    1c04:	cf e5       	ldi	r28, 0x5F	; 95
    1c06:	d4 e0       	ldi	r29, 0x04	; 4
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	cd bf       	out	0x3d, r28	; 61

00001c0c <__do_clear_bss>:
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	a0 e6       	ldi	r26, 0x60	; 96
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <.do_clear_bss_start>

00001c14 <.do_clear_bss_loop>:
    1c14:	1d 92       	st	X+, r1

00001c16 <.do_clear_bss_start>:
    1c16:	a1 3a       	cpi	r26, 0xA1	; 161
    1c18:	b2 07       	cpc	r27, r18
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <.do_clear_bss_loop>
    1c1c:	31 d0       	rcall	.+98     	; 0x1c80 <main>
    1c1e:	62 c1       	rjmp	.+708    	; 0x1ee4 <_exit>

00001c20 <__bad_interrupt>:
    1c20:	2e c0       	rjmp	.+92     	; 0x1c7e <__vector_default>

00001c22 <TimeOut>:
	return 0;
}

static inline void TimeOut(void)
{
	TCCR1B = (1<<CS12 | 1<<CS10); // start with div 1024
    1c22:	85 e0       	ldi	r24, 0x05	; 5
    1c24:	8e bd       	out	0x2e, r24	; 46
	if(TIFR & (1 << TOV1))
    1c26:	08 b6       	in	r0, 0x38	; 56
    1c28:	02 fe       	sbrs	r0, 2
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <TimeOut+0x26>
	{
		TIFR = 0;
    1c2c:	18 be       	out	0x38, r1	; 56
		if (time_out++ > TIME_OUT_VALUE)
    1c2e:	80 91 a0 00 	lds	r24, 0x00A0
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	98 0f       	add	r25, r24
    1c36:	90 93 a0 00 	sts	0x00A0, r25
    1c3a:	89 30       	cpi	r24, 0x09	; 9
    1c3c:	28 f0       	brcs	.+10     	; 0x1c48 <TimeOut+0x26>
		{
			TCCR1B = 0;
    1c3e:	1e bc       	out	0x2e, r1	; 46
			TIMSK  = 0;
    1c40:	19 be       	out	0x39, r1	; 57
			jump_to_app();		// Jump to application sector
    1c42:	e0 e0       	ldi	r30, 0x00	; 0
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	09 94       	ijmp
    1c48:	08 95       	ret

00001c4a <recvchar>:
	UART_DATA = data;
}

static uint8_t recvchar(void)
{
	CLR_CNT_TIME_OUT;
    1c4a:	10 92 a0 00 	sts	0x00A0, r1
	while (!(UART_STATUS & (1<<UART_RXREADY)))
    1c4e:	5f 99       	sbic	0x0b, 7	; 11
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <recvchar+0xc>
	{
		TimeOut();
    1c52:	e7 df       	rcall	.-50     	; 0x1c22 <TimeOut>
    1c54:	fc cf       	rjmp	.-8      	; 0x1c4e <recvchar+0x4>
	}
	return UART_DATA;
    1c56:	8c b1       	in	r24, 0x0c	; 12
}
    1c58:	08 95       	ret

00001c5a <sendchar>:
	// void __vector_default(void) { ; }
	void __vector_default(void) { ; }
#endif

static void sendchar(uint8_t data)
{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	1f 92       	push	r1
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	CLR_CNT_TIME_OUT;
    1c64:	10 92 a0 00 	sts	0x00A0, r1
	while (!(UART_STATUS & (1<<UART_TXREADY)))
    1c68:	5d 99       	sbic	0x0b, 5	; 11
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <sendchar+0x1a>
	{
		TimeOut();
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	d9 df       	rcall	.-78     	; 0x1c22 <TimeOut>
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	fa cf       	rjmp	.-12     	; 0x1c68 <sendchar+0xe>
	}
	UART_DATA = data;
    1c74:	8c b9       	out	0x0c, r24	; 12
}
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <__vector_default>:

#if defined(BOOTLOADERHASNOVECTORS)
	#warning "This Bootloader does not link interrupt vectors - see makefile"
	/* make the linker happy - it wants to see __vector_default */
	// void __vector_default(void) { ; }
	void __vector_default(void) { ; }
    1c7e:	08 95       	ret

00001c80 <main>:
	uint8_t device = 0, val;



#ifdef ENABLE_BOOT_LED	// LED ON
	BIPORT |= (1<<BIPNUM);	
    1c80:	95 9a       	sbi	0x12, 5	; 18
	BIDDR  |= (1<<BIPNUM);
    1c82:	8d 9a       	sbi	0x11, 5	; 17
#ifdef DISABLE_WDT_AT_STARTUP
	#ifdef WDT_OFF_SPECIAL
		#warning "using target specific watchdog_off"
		bootloader_wdt_off();
	#else
		cli();
    1c84:	f8 94       	cli
		wdt_reset();
    1c86:	a8 95       	wdr
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	a8 95       	wdr
    1c8e:	81 b5       	in	r24, 0x21	; 33
    1c90:	88 61       	ori	r24, 0x18	; 24
    1c92:	81 bd       	out	0x21, r24	; 33
    1c94:	11 bc       	out	0x21, r1	; 33
    1c96:	0f be       	out	0x3f, r0	; 63
	
#ifdef START_POWERSAVE
	uint8_t OK = 1;
#endif

	RELE_DDR  |=  (1<<RELE_PNUM);		// set as Output
    1c98:	b9 9a       	sbi	0x17, 1	; 23
	RELE_PORT &= ~(1<<RELE_PNUM);		// Rele turn off
    1c9a:	c1 98       	cbi	0x18, 1	; 24

	BLDDR  &= ~(1<<BLPNUM);		// set as Input
    1c9c:	8d 98       	cbi	0x11, 5	; 17
	BLPORT |= (1<<BLPNUM);		// Enable pullup
    1c9e:	95 9a       	sbi	0x12, 5	; 18
	
	BL_2_DDR  &= ~(1<<BL_2_PNUM);		// set as Input
    1ca0:	bf 98       	cbi	0x17, 7	; 23
	BL_2_PORT |= (1<<BL_2_PNUM);		// Enable pullup
    1ca2:	c7 9a       	sbi	0x18, 7	; 24

	// Set baud rate
	UART_BAUD_HIGH = (UART_CALC_BAUDRATE(BAUDRATE)>>8) & 0xFF;
    1ca4:	10 bc       	out	0x20, r1	; 32
	UART_BAUD_LOW = (UART_CALC_BAUDRATE(BAUDRATE) & 0xFF);
    1ca6:	89 e1       	ldi	r24, 0x19	; 25
    1ca8:	89 b9       	out	0x09, r24	; 9

#ifdef UART_DOUBLESPEED
	UART_STATUS = ( 1<<UART_DOUBLE );
#endif

	UART_CTRL = UART_CTRL_DATA;
    1caa:	88 e1       	ldi	r24, 0x18	; 24
    1cac:	8a b9       	out	0x0a, r24	; 10
	UART_CTRL2 = UART_CTRL2_DATA;
    1cae:	86 e8       	ldi	r24, 0x86	; 134
    1cb0:	80 bd       	out	0x20, r24	; 32
    1cb2:	e0 e9       	ldi	r30, 0x90	; 144
    1cb4:	f1 e0       	ldi	r31, 0x01	; 1

#elif defined(START_SIMPLE)
	uint16_t cnt = 0;
	uint16_t cnt_key;
	
	cnt_key = 0;
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
	for(cnt = 0; cnt < WAIT_VALUE; cnt++)
	{
		if ((BLPIN & (1<<BLPNUM)) && (BL_2_PIN & (1<<BL_2_PNUM))) 
    1cba:	85 9b       	sbis	0x10, 5	; 16
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <main+0x42>
    1cbe:	b7 99       	sbic	0x16, 7	; 22
		{
			cnt_key++;
    1cc0:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc2:	af ec       	ldi	r26, 0xCF	; 207
    1cc4:	b7 e0       	ldi	r27, 0x07	; 7
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <main+0x46>
    1cca:	00 c0       	rjmp	.+0      	; 0x1ccc <main+0x4c>
    1ccc:	00 00       	nop
    1cce:	31 97       	sbiw	r30, 0x01	; 1
#elif defined(START_SIMPLE)
	uint16_t cnt = 0;
	uint16_t cnt_key;
	
	cnt_key = 0;
	for(cnt = 0; cnt < WAIT_VALUE; cnt++)
    1cd0:	a1 f7       	brne	.-24     	; 0x1cba <main+0x3a>
		{
			cnt_key++;
		}
		_delay_ms(1);
	}
	if (cnt_key > (WAIT_VALUE - (WAIT_VALUE/2))) 
    1cd2:	89 3c       	cpi	r24, 0xC9	; 201
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	18 f0       	brcs	.+6      	; 0x1cde <main+0x5e>
	#ifdef UART_DOUBLESPEED
		UART_STATUS &= ~( 1<<UART_DOUBLE );
	#endif

		#ifdef ENABLE_BOOT_LED	// LED OFF
		BIPORT &= ~(1<<BIPNUM);	
    1cd8:	95 98       	cbi	0x12, 5	; 18
		BIDDR  &= ~(1<<BIPNUM);
    1cda:	8d 98       	cbi	0x11, 5	; 17
		#endif

		jump_to_app();			// Jump to application sector
    1cdc:	09 95       	icall

#elif defined(START_SIMPLE)
	uint16_t cnt = 0;
	uint16_t cnt_key;
	
	cnt_key = 0;
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	c0 e0       	ldi	r28, 0x00	; 0
    1ce2:	d0 e0       	ldi	r29, 0x00	; 0
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    1ce4:	08 e1       	ldi	r16, 0x18	; 24
    1ce6:	b0 2e       	mov	r11, r16
    1ce8:	8c e0       	ldi	r24, 0x0C	; 12
    1cea:	a8 2e       	mov	r10, r24
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) 
		{
		boot_page_erase(addr);		// Perform page erase
    1cec:	93 e0       	ldi	r25, 0x03	; 3
    1cee:	99 2e       	mov	r9, r25
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
		}
	boot_rww_enable();
    1cf0:	01 e1       	ldi	r16, 0x11	; 17

	do 
		{
		data = *tmp++;
		data |= *tmp++ << 8;
		boot_page_fill(baddr, data);	// call asm routine.
    1cf2:	88 24       	eor	r8, r8
    1cf4:	83 94       	inc	r8
		baddr += 2;			// Select next word in memory
		size -= 2;			// Reduce number of bytes to write by two
		} 
	while (size);				// Loop until all bytes written

	boot_page_write(pagestart);
    1cf6:	25 e0       	ldi	r18, 0x05	; 5
    1cf8:	22 2e       	mov	r2, r18
#endif


	for(;;) 
	{
		val = recvchar();
    1cfa:	a7 df       	rcall	.-178    	; 0x1c4a <recvchar>
		// Autoincrement?
		if (val == 'a') 
    1cfc:	81 36       	cpi	r24, 0x61	; 97
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <main+0x84>
		{
			sendchar('Y');			// Autoincrement is quicker
    1d00:	89 e5       	ldi	r24, 0x59	; 89
    1d02:	ee c0       	rjmp	.+476    	; 0x1ee0 <main+0x260>

		//write address
		} 
		else if (val == 'A') 
    1d04:	81 34       	cpi	r24, 0x41	; 65
    1d06:	41 f4       	brne	.+16     	; 0x1d18 <main+0x98>
		{
			address = recvchar();		//read address 8 MSB
    1d08:	a0 df       	rcall	.-192    	; 0x1c4a <recvchar>
    1d0a:	c8 2f       	mov	r28, r24
    1d0c:	d0 e0       	ldi	r29, 0x00	; 0
			address = (address<<8) | recvchar();
    1d0e:	dc 2f       	mov	r29, r28
    1d10:	cc 27       	eor	r28, r28
    1d12:	9b df       	rcall	.-202    	; 0x1c4a <recvchar>
    1d14:	c8 2b       	or	r28, r24
    1d16:	c0 c0       	rjmp	.+384    	; 0x1e98 <main+0x218>
			sendchar('\r');

		// Buffer load support
		} 
		else if (val == 'b') 
    1d18:	82 36       	cpi	r24, 0x62	; 98
    1d1a:	31 f4       	brne	.+12     	; 0x1d28 <main+0xa8>
		{
			sendchar('Y');					// Report buffer load supported
    1d1c:	89 e5       	ldi	r24, 0x59	; 89
    1d1e:	9d df       	rcall	.-198    	; 0x1c5a <sendchar>
			sendchar((sizeof(gBuffer) >> 8) & 0xFF);	// Report buffer size in bytes
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	9b df       	rcall	.-202    	; 0x1c5a <sendchar>
			sendchar(sizeof(gBuffer) & 0xFF);
    1d24:	80 e4       	ldi	r24, 0x40	; 64
    1d26:	dc c0       	rjmp	.+440    	; 0x1ee0 <main+0x260>

		// Start buffer load
		} 
		else if (val == 'B') 
    1d28:	82 34       	cpi	r24, 0x42	; 66
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <main+0xae>
    1d2c:	53 c0       	rjmp	.+166    	; 0x1dd4 <main+0x154>
		{
			pagebuf_t size;
			size = recvchar() << 8;				// Load high byte of buffersize
    1d2e:	8d df       	rcall	.-230    	; 0x1c4a <recvchar>
			size |= recvchar();				// Load low byte of buffersize
    1d30:	8c df       	rcall	.-232    	; 0x1c4a <recvchar>
    1d32:	58 2e       	mov	r5, r24
			val = recvchar();				// Load memory type ('E' or 'F')
    1d34:	8a df       	rcall	.-236    	; 0x1c4a <recvchar>
    1d36:	38 2e       	mov	r3, r24
    1d38:	a0 e6       	ldi	r26, 0x60	; 96
    1d3a:	ea 2e       	mov	r14, r26
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	fa 2e       	mov	r15, r26
static inline void recvBuffer(pagebuf_t size)
{
	pagebuf_t cnt;
	uint8_t *tmp = gBuffer;

	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) 
    1d40:	41 2c       	mov	r4, r1
		{
		*tmp++ = (cnt < size) ? recvchar() : 0xFF;
    1d42:	45 14       	cp	r4, r5
    1d44:	10 f4       	brcc	.+4      	; 0x1d4a <main+0xca>
    1d46:	81 df       	rcall	.-254    	; 0x1c4a <recvchar>
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <main+0xcc>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	81 93       	st	Z+, r24
    1d50:	7f 01       	movw	r14, r30
static inline void recvBuffer(pagebuf_t size)
{
	pagebuf_t cnt;
	uint8_t *tmp = gBuffer;

	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) 
    1d52:	43 94       	inc	r4
    1d54:	f0 e4       	ldi	r31, 0x40	; 64
    1d56:	4f 12       	cpse	r4, r31
    1d58:	f4 cf       	rjmp	.-24     	; 0x1d42 <main+0xc2>
			size = recvchar() << 8;				// Load high byte of buffersize
			size |= recvchar();				// Load low byte of buffersize
			val = recvchar();				// Load memory type ('E' or 'F')
			recvBuffer(size);

			if (device == DEVTYPE) 
    1d5a:	17 37       	cpi	r17, 0x77	; 119
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <main+0xe0>
    1d5e:	90 c0       	rjmp	.+288    	; 0x1e80 <main+0x200>
			{
				if (val == 'F') 
    1d60:	26 e4       	ldi	r18, 0x46	; 70
    1d62:	32 12       	cpse	r3, r18
    1d64:	99 c0       	rjmp	.+306    	; 0x1e98 <main+0x218>
		}
}

static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t pagestart = (uint32_t)waddr<<1;
    1d66:	ce 01       	movw	r24, r28
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	6c 01       	movw	r12, r24
    1d6e:	7d 01       	movw	r14, r26
    1d70:	cc 0c       	add	r12, r12
    1d72:	dd 1c       	adc	r13, r13
    1d74:	ee 1c       	adc	r14, r14
    1d76:	ff 1c       	adc	r15, r15
	uint32_t baddr = pagestart;
	uint16_t data;
	uint8_t *tmp = gBuffer;
    1d78:	20 91 60 00 	lds	r18, 0x0060
}

static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t pagestart = (uint32_t)waddr<<1;
	uint32_t baddr = pagestart;
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	a6 01       	movw	r20, r12
	uint16_t data;
	uint8_t *tmp = gBuffer;
    1d80:	a0 e6       	ldi	r26, 0x60	; 96
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	12 96       	adiw	r26, 0x02	; 2
    1d86:	fd 01       	movw	r30, r26
    1d88:	31 97       	sbiw	r30, 0x01	; 1

	do 
		{
		data = *tmp++;
		data |= *tmp++ << 8;
    1d8a:	80 81       	ld	r24, Z
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	38 2b       	or	r19, r24
		boot_page_fill(baddr, data);	// call asm routine.
    1d90:	fa 01       	movw	r30, r20
    1d92:	09 01       	movw	r0, r18
    1d94:	80 92 57 00 	sts	0x0057, r8
    1d98:	e8 95       	spm
    1d9a:	11 24       	eor	r1, r1

		baddr += 2;			// Select next word in memory
    1d9c:	4e 5f       	subi	r20, 0xFE	; 254
    1d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1da0:	6f 4f       	sbci	r22, 0xFF	; 255
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	20 e6       	ldi	r18, 0x60	; 96
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	2a 1b       	sub	r18, r26
    1daa:	82 2f       	mov	r24, r18
    1dac:	85 0d       	add	r24, r5
		size -= 2;			// Reduce number of bytes to write by two
		} 
	while (size);				// Loop until all bytes written
    1dae:	11 f0       	breq	.+4      	; 0x1db4 <main+0x134>
	uint8_t *tmp = gBuffer;

	do 
		{
		data = *tmp++;
		data |= *tmp++ << 8;
    1db0:	2c 91       	ld	r18, X
    1db2:	e8 cf       	rjmp	.-48     	; 0x1d84 <main+0x104>
		baddr += 2;			// Select next word in memory
		size -= 2;			// Reduce number of bytes to write by two
		} 
	while (size);				// Loop until all bytes written

	boot_page_write(pagestart);
    1db4:	f6 01       	movw	r30, r12
    1db6:	20 92 57 00 	sts	0x0057, r2
    1dba:	e8 95       	spm
	boot_spm_busy_wait();
    1dbc:	07 b6       	in	r0, 0x37	; 55
    1dbe:	00 fc       	sbrc	r0, 0
    1dc0:	fd cf       	rjmp	.-6      	; 0x1dbc <main+0x13c>
	boot_rww_enable();		// Re-enable the RWW section
    1dc2:	00 93 57 00 	sts	0x0057, r16
    1dc6:	e8 95       	spm

	return baddr>>1;
    1dc8:	76 95       	lsr	r23
    1dca:	67 95       	ror	r22
    1dcc:	57 95       	ror	r21
    1dce:	47 95       	ror	r20
    1dd0:	ea 01       	movw	r28, r20
    1dd2:	62 c0       	rjmp	.+196    	; 0x1e98 <main+0x218>
			sendchar(0);
			}

		// Block read
		} 
		else if (val == 'g') 
    1dd4:	87 36       	cpi	r24, 0x67	; 103
    1dd6:	41 f5       	brne	.+80     	; 0x1e28 <main+0x1a8>
		{
			pagebuf_t size;
			size = recvchar() << 8;				// Load high byte of buffersize
    1dd8:	38 df       	rcall	.-400    	; 0x1c4a <recvchar>
			size |= recvchar();				// Load low byte of buffersize
    1dda:	37 df       	rcall	.-402    	; 0x1c4a <recvchar>
    1ddc:	f8 2e       	mov	r15, r24
			val = recvchar();				// Get memtype
    1dde:	35 df       	rcall	.-406    	; 0x1c4a <recvchar>

			if (val == 'F') 
    1de0:	86 34       	cpi	r24, 0x46	; 70
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <main+0x166>
    1de4:	8a cf       	rjmp	.-236    	; 0x1cfa <main+0x7a>



static inline uint16_t readFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t baddr = (uint32_t)waddr<<1;
    1de6:	ce 01       	movw	r24, r28
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	2c 01       	movw	r4, r24
    1dee:	3d 01       	movw	r6, r26
    1df0:	44 0c       	add	r4, r4
    1df2:	55 1c       	adc	r5, r5
    1df4:	66 1c       	adc	r6, r6
    1df6:	77 1c       	adc	r7, r7
    1df8:	cf 2d       	mov	r28, r15
    1dfa:	c4 0d       	add	r28, r4
#warning "Bootloader not read-protected"

	#if defined(RAMPZ)
		data = pgm_read_word_far(baddr);
	#else
		data = pgm_read_word_near(baddr);
    1dfc:	f2 01       	movw	r30, r4
    1dfe:	e5 90       	lpm	r14, Z+
    1e00:	f4 90       	lpm	r15, Z
		else 
		{
		data = 0xFFFF; // fake empty
		}
#endif
		sendchar(data);			// send LSB
    1e02:	8e 2d       	mov	r24, r14
    1e04:	2a df       	rcall	.-428    	; 0x1c5a <sendchar>
		sendchar((data >> 8));		// send MSB
    1e06:	8f 2d       	mov	r24, r15
    1e08:	28 df       	rcall	.-432    	; 0x1c5a <sendchar>
		baddr += 2;			// Select next word in memory
    1e0a:	f2 e0       	ldi	r31, 0x02	; 2
    1e0c:	4f 0e       	add	r4, r31
    1e0e:	51 1c       	adc	r5, r1
    1e10:	61 1c       	adc	r6, r1
    1e12:	71 1c       	adc	r7, r1
		size -= 2;			// Subtract two bytes from number of bytes to read
	} 
	while (size);				// Repeat until block has been read
    1e14:	c4 11       	cpse	r28, r4
    1e16:	f2 cf       	rjmp	.-28     	; 0x1dfc <main+0x17c>
	return baddr>>1;
    1e18:	d3 01       	movw	r26, r6
    1e1a:	c2 01       	movw	r24, r4
    1e1c:	b6 95       	lsr	r27
    1e1e:	a7 95       	ror	r26
    1e20:	97 95       	ror	r25
    1e22:	87 95       	ror	r24
    1e24:	ec 01       	movw	r28, r24
    1e26:	69 cf       	rjmp	.-302    	; 0x1cfa <main+0x7a>
			//address = readEEpromPage(address, size);
			}

		// Chip erase
 		} 
		else if (val == 'e') 
    1e28:	85 36       	cpi	r24, 0x65	; 101
    1e2a:	a9 f4       	brne	.+42     	; 0x1e56 <main+0x1d6>
		{
		if (device == DEVTYPE) 
    1e2c:	17 37       	cpi	r17, 0x77	; 119
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <main+0x1b2>
    1e30:	33 c0       	rjmp	.+102    	; 0x1e98 <main+0x218>
    1e32:	e0 e0       	ldi	r30, 0x00	; 0
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) 
		{
		boot_page_erase(addr);		// Perform page erase
    1e36:	90 92 57 00 	sts	0x0057, r9
    1e3a:	e8 95       	spm
		boot_spm_busy_wait();		// Wait until the memory is erased.
    1e3c:	07 b6       	in	r0, 0x37	; 55
    1e3e:	00 fc       	sbrc	r0, 0
    1e40:	fd cf       	rjmp	.-6      	; 0x1e3c <main+0x1bc>
    1e42:	e0 5c       	subi	r30, 0xC0	; 192
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255

static inline void eraseFlash(void)
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) 
    1e46:	e1 15       	cp	r30, r1
    1e48:	2c e1       	ldi	r18, 0x1C	; 28
    1e4a:	f2 07       	cpc	r31, r18
    1e4c:	a1 f7       	brne	.-24     	; 0x1e36 <main+0x1b6>
		{
		boot_page_erase(addr);		// Perform page erase
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
		}
	boot_rww_enable();
    1e4e:	00 93 57 00 	sts	0x0057, r16
    1e52:	e8 95       	spm
    1e54:	21 c0       	rjmp	.+66     	; 0x1e98 <main+0x218>
			}
		sendchar('\r');

		// Exit upgrade
		} 
		else if (val == 'E') 
    1e56:	85 34       	cpi	r24, 0x45	; 69
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <main+0x1e8>
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	a8 95       	wdr
    1e60:	b1 bc       	out	0x21, r11	; 33
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	a1 bc       	out	0x21, r10	; 33
    1e66:	18 c0       	rjmp	.+48     	; 0x1e98 <main+0x218>
				}
			sendchar('\r');
		#endif
		// Enter programming mode
		} 
		else if (val == 'P') 
    1e68:	80 35       	cpi	r24, 0x50	; 80
    1e6a:	b1 f0       	breq	.+44     	; 0x1e98 <main+0x218>
		{
		sendchar('\r');

		// Leave programming mode
		} 
		else if (val == 'L') 
    1e6c:	8c 34       	cpi	r24, 0x4C	; 76
    1e6e:	a1 f0       	breq	.+40     	; 0x1e98 <main+0x218>
		{
		sendchar('\r');
		// return programmer type
		} 
		else if (val == 'p') 
    1e70:	80 37       	cpi	r24, 0x70	; 112
    1e72:	11 f4       	brne	.+4      	; 0x1e78 <main+0x1f8>
		{
		sendchar('S');		// always serial programmer
    1e74:	83 e5       	ldi	r24, 0x53	; 83
    1e76:	34 c0       	rjmp	.+104    	; 0x1ee0 <main+0x260>
			sendchar(read_fuse_lock(GET_EXTENDED_FUSE_BITS));
			#endif

		// Return device type
		} 
		else if (val == 't') 
    1e78:	84 37       	cpi	r24, 0x74	; 116
    1e7a:	21 f4       	brne	.+8      	; 0x1e84 <main+0x204>
		{
		sendchar(DEVTYPE);
    1e7c:	87 e7       	ldi	r24, 0x77	; 119
    1e7e:	ed de       	rcall	.-550    	; 0x1c5a <sendchar>
		sendchar(0);
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	2e c0       	rjmp	.+92     	; 0x1ee0 <main+0x260>
		// clear and set LED ignored
		} 
		else if ((val == 'x') || (val == 'y')) 
    1e84:	98 e8       	ldi	r25, 0x88	; 136
    1e86:	98 0f       	add	r25, r24
    1e88:	92 30       	cpi	r25, 0x02	; 2
    1e8a:	10 f4       	brcc	.+4      	; 0x1e90 <main+0x210>
		{
		recvchar();
    1e8c:	de de       	rcall	.-580    	; 0x1c4a <recvchar>
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <main+0x218>
		sendchar('\r');

		// set device
		} 
		else if (val == 'T') 
    1e90:	84 35       	cpi	r24, 0x54	; 84
    1e92:	21 f4       	brne	.+8      	; 0x1e9c <main+0x21c>
		{
		device = recvchar();
    1e94:	da de       	rcall	.-588    	; 0x1c4a <recvchar>
    1e96:	18 2f       	mov	r17, r24
		sendchar('\r');
    1e98:	8d e0       	ldi	r24, 0x0D	; 13
    1e9a:	22 c0       	rjmp	.+68     	; 0x1ee0 <main+0x260>
		// Return software identifier
		} 
		else if (val == 'S') 
    1e9c:	83 35       	cpi	r24, 0x53	; 83
    1e9e:	71 f4       	brne	.+28     	; 0x1ebc <main+0x23c>
}
#endif

static void send_boot(void)
{
	sendchar('A');
    1ea0:	81 e4       	ldi	r24, 0x41	; 65
    1ea2:	db de       	rcall	.-586    	; 0x1c5a <sendchar>
	sendchar('V');
    1ea4:	86 e5       	ldi	r24, 0x56	; 86
    1ea6:	d9 de       	rcall	.-590    	; 0x1c5a <sendchar>
	sendchar('R');
    1ea8:	82 e5       	ldi	r24, 0x52	; 82
    1eaa:	d7 de       	rcall	.-594    	; 0x1c5a <sendchar>
	sendchar('B');
    1eac:	82 e4       	ldi	r24, 0x42	; 66
    1eae:	d5 de       	rcall	.-598    	; 0x1c5a <sendchar>
	sendchar('O');
    1eb0:	8f e4       	ldi	r24, 0x4F	; 79
    1eb2:	d3 de       	rcall	.-602    	; 0x1c5a <sendchar>
	sendchar('O');
    1eb4:	8f e4       	ldi	r24, 0x4F	; 79
    1eb6:	d1 de       	rcall	.-606    	; 0x1c5a <sendchar>
	sendchar('T');
    1eb8:	84 e5       	ldi	r24, 0x54	; 84
    1eba:	12 c0       	rjmp	.+36     	; 0x1ee0 <main+0x260>
		{
		send_boot();

		// Return Software Version
		} 
		else if (val == 'V') {
    1ebc:	86 35       	cpi	r24, 0x56	; 86
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <main+0x248>
		sendchar(VERSION_HIGH);
    1ec0:	80 e3       	ldi	r24, 0x30	; 48
    1ec2:	cb de       	rcall	.-618    	; 0x1c5a <sendchar>
		sendchar(VERSION_LOW);
    1ec4:	88 e3       	ldi	r24, 0x38	; 56
    1ec6:	0c c0       	rjmp	.+24     	; 0x1ee0 <main+0x260>

		// Return Signature Bytes (it seems that 
		// AVRProg expects the "Atmel-byte" 0x1E last
		// but shows it first in the dialog-window)
		} 
		else if (val == 's') 
    1ec8:	83 37       	cpi	r24, 0x73	; 115
    1eca:	31 f4       	brne	.+12     	; 0x1ed8 <main+0x258>
		{
		sendchar(SIG_BYTE3);
    1ecc:	87 e0       	ldi	r24, 0x07	; 7
    1ece:	c5 de       	rcall	.-630    	; 0x1c5a <sendchar>
		sendchar(SIG_BYTE2);
    1ed0:	83 e9       	ldi	r24, 0x93	; 147
    1ed2:	c3 de       	rcall	.-634    	; 0x1c5a <sendchar>
		sendchar(SIG_BYTE1);
    1ed4:	8e e1       	ldi	r24, 0x1E	; 30
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <main+0x260>

		/* ESC */
		} 
		else if(val != 0x1b) 
    1ed8:	8b 31       	cpi	r24, 0x1B	; 27
    1eda:	09 f4       	brne	.+2      	; 0x1ede <main+0x25e>
    1edc:	0e cf       	rjmp	.-484    	; 0x1cfa <main+0x7a>
		{
		sendchar('?');
    1ede:	8f e3       	ldi	r24, 0x3F	; 63
    1ee0:	bc de       	rcall	.-648    	; 0x1c5a <sendchar>
    1ee2:	0b cf       	rjmp	.-490    	; 0x1cfa <main+0x7a>

00001ee4 <_exit>:
    1ee4:	f8 94       	cli

00001ee6 <__stop_program>:
    1ee6:	ff cf       	rjmp	.-2      	; 0x1ee6 <__stop_program>
