
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033a  00001c00  00001c00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00001f3a  00001f3a  000003ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  00001f3a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000040  00800060  00001f3a  000003ae  2**0
                  ALLOC
  4 .stab         00000c54  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000fae  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00001fb2  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fe4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00001c00 <__ctors_end>:
    1c00:	11 24       	eor	r1, r1
    1c02:	1f be       	out	0x3f, r1	; 63
    1c04:	cf e5       	ldi	r28, 0x5F	; 95
    1c06:	d4 e0       	ldi	r29, 0x04	; 4
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	cd bf       	out	0x3d, r28	; 61

00001c0c <__do_clear_bss>:
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	a0 e6       	ldi	r26, 0x60	; 96
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <.do_clear_bss_start>

00001c14 <.do_clear_bss_loop>:
    1c14:	1d 92       	st	X+, r1

00001c16 <.do_clear_bss_start>:
    1c16:	a0 3a       	cpi	r26, 0xA0	; 160
    1c18:	b2 07       	cpc	r27, r18
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <.do_clear_bss_loop>
    1c1c:	0b d0       	rcall	.+22     	; 0x1c34 <main>
    1c1e:	8b c1       	rjmp	.+790    	; 0x1f36 <_exit>

00001c20 <__bad_interrupt>:
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <__vector_default>

00001c22 <sendchar>:
	void __vector_default(void) { ; }
#endif

static void sendchar(uint8_t data)
{
	while (!(UART_STATUS & (1<<UART_TXREADY)));
    1c22:	5d 9b       	sbis	0x0b, 5	; 11
    1c24:	fe cf       	rjmp	.-4      	; 0x1c22 <sendchar>
	UART_DATA = data;
    1c26:	8c b9       	out	0x0c, r24	; 12
    1c28:	08 95       	ret

00001c2a <recvchar>:
}

static uint8_t recvchar(void)
{
	while (!(UART_STATUS & (1<<UART_RXREADY)));
    1c2a:	5f 9b       	sbis	0x0b, 7	; 11
    1c2c:	fe cf       	rjmp	.-4      	; 0x1c2a <recvchar>
	return UART_DATA;
    1c2e:	8c b1       	in	r24, 0x0c	; 12
}
    1c30:	08 95       	ret

00001c32 <__vector_default>:

#if defined(BOOTLOADERHASNOVECTORS)
	#warning "This Bootloader does not link interrupt vectors - see makefile"
	/* make the linker happy - it wants to see __vector_default */
	// void __vector_default(void) { ; }
	void __vector_default(void) { ; }
    1c32:	08 95       	ret

00001c34 <main>:
}

static void (*jump_to_app)(void) = 0x0000;

int main(void)
{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	1f 92       	push	r1
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	uint8_t device = 0, val;



#ifdef ENABLE_BOOT_LED	// LED ON
	BIPORT |= (1<<BIPNUM);	
    1c3e:	95 9a       	sbi	0x12, 5	; 18
	BIDDR  |= (1<<BIPNUM);
    1c40:	8d 9a       	sbi	0x11, 5	; 17
#ifdef DISABLE_WDT_AT_STARTUP
	#ifdef WDT_OFF_SPECIAL
		#warning "using target specific watchdog_off"
		bootloader_wdt_off();
	#else
		cli();
    1c42:	f8 94       	cli
		wdt_reset();
    1c44:	a8 95       	wdr
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	a8 95       	wdr
    1c4c:	81 b5       	in	r24, 0x21	; 33
    1c4e:	88 61       	ori	r24, 0x18	; 24
    1c50:	81 bd       	out	0x21, r24	; 33
    1c52:	11 bc       	out	0x21, r1	; 33
    1c54:	0f be       	out	0x3f, r0	; 63
	
#ifdef START_POWERSAVE
	uint8_t OK = 1;
#endif

	RELE_DDR  |=  (1<<RELE_PNUM);		// set as Output
    1c56:	b9 9a       	sbi	0x17, 1	; 23
	RELE_PORT &= ~(1<<RELE_PNUM);		// Rele turn off
    1c58:	c1 98       	cbi	0x18, 1	; 24

	BLDDR  &= ~(1<<BLPNUM);		// set as Input
    1c5a:	8d 98       	cbi	0x11, 5	; 17
	BLPORT |= (1<<BLPNUM);		// Enable pullup
    1c5c:	95 9a       	sbi	0x12, 5	; 18
	
	BL_2_DDR  &= ~(1<<BL_2_PNUM);		// set as Input
    1c5e:	bf 98       	cbi	0x17, 7	; 23
	BL_2_PORT |= (1<<BL_2_PNUM);		// Enable pullup
    1c60:	c7 9a       	sbi	0x18, 7	; 24

	// Set baud rate
	UART_BAUD_HIGH = (UART_CALC_BAUDRATE(BAUDRATE)>>8) & 0xFF;
    1c62:	10 bc       	out	0x20, r1	; 32
	UART_BAUD_LOW = (UART_CALC_BAUDRATE(BAUDRATE) & 0xFF);
    1c64:	89 e1       	ldi	r24, 0x19	; 25
    1c66:	89 b9       	out	0x09, r24	; 9

#ifdef UART_DOUBLESPEED
	UART_STATUS = ( 1<<UART_DOUBLE );
#endif

	UART_CTRL = UART_CTRL_DATA;
    1c68:	88 e1       	ldi	r24, 0x18	; 24
    1c6a:	8a b9       	out	0x0a, r24	; 10
	UART_CTRL2 = UART_CTRL2_DATA;
    1c6c:	86 e8       	ldi	r24, 0x86	; 134
    1c6e:	80 bd       	out	0x20, r24	; 32
    1c70:	e0 e9       	ldi	r30, 0x90	; 144
    1c72:	f1 e0       	ldi	r31, 0x01	; 1
		// Power-Save code here
	}

#elif defined(START_SIMPLE)
	uint16_t cnt = 0;
	uint16_t cnt_key = 0;
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
	
	for(cnt = 0; cnt < WAIT_VALUE; cnt++)
	{
		if ((BLPIN & (1<<BLPNUM)) && (BL_2_PIN & (1<<BL_2_PNUM))) 
    1c78:	85 9b       	sbis	0x10, 5	; 16
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <main+0x4c>
    1c7c:	b7 99       	sbic	0x16, 7	; 22
		{
			cnt_key++;
    1c7e:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c80:	af ec       	ldi	r26, 0xCF	; 207
    1c82:	b7 e0       	ldi	r27, 0x07	; 7
    1c84:	11 97       	sbiw	r26, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <main+0x50>
    1c88:	00 c0       	rjmp	.+0      	; 0x1c8a <main+0x56>
    1c8a:	00 00       	nop
    1c8c:	31 97       	sbiw	r30, 0x01	; 1

#elif defined(START_SIMPLE)
	uint16_t cnt = 0;
	uint16_t cnt_key = 0;
	
	for(cnt = 0; cnt < WAIT_VALUE; cnt++)
    1c8e:	a1 f7       	brne	.-24     	; 0x1c78 <main+0x44>
		{
			cnt_key++;
		}
		_delay_ms(1);
	}
	if (cnt_key > (WAIT_VALUE - (WAIT_VALUE/2))) 
    1c90:	89 3c       	cpi	r24, 0xC9	; 201
    1c92:	91 05       	cpc	r25, r1
    1c94:	28 f0       	brcs	.+10     	; 0x1ca0 <main+0x6c>
	{
		// jump to main app if pin is not grounded
		BLPORT	  &= ~(1<<BLPNUM);			// set to default	
    1c96:	95 98       	cbi	0x12, 5	; 18
		BL_2_PORT &= ~(1<<BL_2_PNUM);		// set to default
    1c98:	c7 98       	cbi	0x18, 7	; 24
	#ifdef UART_DOUBLESPEED
		UART_STATUS &= ~( 1<<UART_DOUBLE );
	#endif

		#ifdef ENABLE_BOOT_LED	// LED OFF
		BIPORT &= ~(1<<BIPNUM);	
    1c9a:	95 98       	cbi	0x12, 5	; 18
		BIDDR  &= ~(1<<BIPNUM);
    1c9c:	8d 98       	cbi	0x11, 5	; 17
		#endif

		jump_to_app();			// Jump to application sector
    1c9e:	09 95       	icall
		// Power-Save code here
	}

#elif defined(START_SIMPLE)
	uint16_t cnt = 0;
	uint16_t cnt_key = 0;
    1ca0:	10 e0       	ldi	r17, 0x00	; 0
    1ca2:	61 2c       	mov	r6, r1
    1ca4:	71 2c       	mov	r7, r1
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    1ca6:	78 e1       	ldi	r23, 0x18	; 24
    1ca8:	97 2e       	mov	r9, r23
    1caa:	ec e0       	ldi	r30, 0x0C	; 12
    1cac:	8e 2e       	mov	r8, r30
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) 
		{
		boot_page_erase(addr);		// Perform page erase
    1cae:	f3 e0       	ldi	r31, 0x03	; 3
    1cb0:	2f 2e       	mov	r2, r31
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
		}
	boot_rww_enable();
    1cb2:	01 e1       	ldi	r16, 0x11	; 17
    1cb4:	a0 e6       	ldi	r26, 0x60	; 96
    1cb6:	aa 2e       	mov	r10, r26
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	ba 2e       	mov	r11, r26
#endif


	for(;;) 
	{
		val = recvchar();
    1cbc:	b6 df       	rcall	.-148    	; 0x1c2a <recvchar>
		// Autoincrement?
		if (val == 'a') 
    1cbe:	81 36       	cpi	r24, 0x61	; 97
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <main+0x92>
		{
			sendchar('Y');			// Autoincrement is quicker
    1cc2:	89 e5       	ldi	r24, 0x59	; 89
    1cc4:	21 c1       	rjmp	.+578    	; 0x1f08 <main+0x2d4>

		//write address
		} 
		else if (val == 'A') 
    1cc6:	81 34       	cpi	r24, 0x41	; 65
    1cc8:	41 f4       	brne	.+16     	; 0x1cda <main+0xa6>
		{
			address = recvchar();		//read address 8 MSB
    1cca:	af df       	rcall	.-162    	; 0x1c2a <recvchar>
    1ccc:	68 2e       	mov	r6, r24
    1cce:	71 2c       	mov	r7, r1
			address = (address<<8) | recvchar();
    1cd0:	76 2c       	mov	r7, r6
    1cd2:	66 24       	eor	r6, r6
    1cd4:	aa df       	rcall	.-172    	; 0x1c2a <recvchar>
    1cd6:	68 2a       	or	r6, r24
    1cd8:	f3 c0       	rjmp	.+486    	; 0x1ec0 <main+0x28c>
			sendchar('\r');

		// Buffer load support
		} 
		else if (val == 'b') 
    1cda:	82 36       	cpi	r24, 0x62	; 98
    1cdc:	31 f4       	brne	.+12     	; 0x1cea <main+0xb6>
		{
			sendchar('Y');					// Report buffer load supported
    1cde:	89 e5       	ldi	r24, 0x59	; 89
    1ce0:	a0 df       	rcall	.-192    	; 0x1c22 <sendchar>
			sendchar((sizeof(gBuffer) >> 8) & 0xFF);	// Report buffer size in bytes
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	9e df       	rcall	.-196    	; 0x1c22 <sendchar>
			sendchar(sizeof(gBuffer) & 0xFF);
    1ce6:	80 e4       	ldi	r24, 0x40	; 64
    1ce8:	0f c1       	rjmp	.+542    	; 0x1f08 <main+0x2d4>

		// Start buffer load
		} 
		else if (val == 'B') 
    1cea:	82 34       	cpi	r24, 0x42	; 66
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <main+0xbc>
    1cee:	71 c0       	rjmp	.+226    	; 0x1dd2 <main+0x19e>
		{
			pagebuf_t size;
			size = recvchar() << 8;				// Load high byte of buffersize
    1cf0:	9c df       	rcall	.-200    	; 0x1c2a <recvchar>
			size |= recvchar();				// Load low byte of buffersize
    1cf2:	9b df       	rcall	.-202    	; 0x1c2a <recvchar>
    1cf4:	48 2e       	mov	r4, r24
			val = recvchar();				// Load memory type ('E' or 'F')
    1cf6:	99 df       	rcall	.-206    	; 0x1c2a <recvchar>
    1cf8:	98 2f       	mov	r25, r24
    1cfa:	50 e6       	ldi	r21, 0x60	; 96
    1cfc:	e5 2e       	mov	r14, r21
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	f5 2e       	mov	r15, r21
static inline void recvBuffer(pagebuf_t size)
{
	pagebuf_t cnt;
	uint8_t *tmp = gBuffer;

	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) 
    1d02:	d1 2c       	mov	r13, r1
		{
		*tmp++ = (cnt < size) ? recvchar() : 0xFF;
    1d04:	d4 14       	cp	r13, r4
    1d06:	20 f4       	brcc	.+8      	; 0x1d10 <main+0xdc>
    1d08:	99 83       	std	Y+1, r25	; 0x01
    1d0a:	8f df       	rcall	.-226    	; 0x1c2a <recvchar>
    1d0c:	99 81       	ldd	r25, Y+1	; 0x01
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <main+0xde>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	f7 01       	movw	r30, r14
    1d14:	81 93       	st	Z+, r24
    1d16:	7f 01       	movw	r14, r30
static inline void recvBuffer(pagebuf_t size)
{
	pagebuf_t cnt;
	uint8_t *tmp = gBuffer;

	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) 
    1d18:	d3 94       	inc	r13
    1d1a:	f0 e4       	ldi	r31, 0x40	; 64
    1d1c:	df 12       	cpse	r13, r31
    1d1e:	f2 cf       	rjmp	.-28     	; 0x1d04 <main+0xd0>
			size = recvchar() << 8;				// Load high byte of buffersize
			size |= recvchar();				// Load low byte of buffersize
			val = recvchar();				// Load memory type ('E' or 'F')
			recvBuffer(size);

			if (device == DEVTYPE) 
    1d20:	17 37       	cpi	r17, 0x77	; 119
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <main+0xf2>
    1d24:	c1 c0       	rjmp	.+386    	; 0x1ea8 <main+0x274>
			{
				if (val == 'F') 
    1d26:	96 34       	cpi	r25, 0x46	; 70
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <main+0xf8>
    1d2a:	37 c0       	rjmp	.+110    	; 0x1d9a <main+0x166>
		}
}

static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t pagestart = (uint32_t)waddr<<1;
    1d2c:	63 01       	movw	r12, r6
    1d2e:	e1 2c       	mov	r14, r1
    1d30:	f1 2c       	mov	r15, r1
    1d32:	cc 0c       	add	r12, r12
    1d34:	dd 1c       	adc	r13, r13
    1d36:	ee 1c       	adc	r14, r14
    1d38:	ff 1c       	adc	r15, r15
	uint32_t baddr = pagestart;
	uint16_t data;
	uint8_t *tmp = gBuffer;
    1d3a:	20 91 60 00 	lds	r18, 0x0060
}

static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t pagestart = (uint32_t)waddr<<1;
	uint32_t baddr = pagestart;
    1d3e:	b7 01       	movw	r22, r14
    1d40:	a6 01       	movw	r20, r12
	uint16_t data;
	uint8_t *tmp = gBuffer;
    1d42:	a0 e6       	ldi	r26, 0x60	; 96
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	12 96       	adiw	r26, 0x02	; 2
    1d48:	fd 01       	movw	r30, r26
    1d4a:	31 97       	sbiw	r30, 0x01	; 1

	do 
		{
		data = *tmp++;
		data |= *tmp++ << 8;
    1d4c:	80 81       	ld	r24, Z
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	38 2b       	or	r19, r24
		boot_page_fill(baddr, data);	// call asm routine.
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	fa 01       	movw	r30, r20
    1d56:	09 01       	movw	r0, r18
    1d58:	80 93 57 00 	sts	0x0057, r24
    1d5c:	e8 95       	spm
    1d5e:	11 24       	eor	r1, r1

		baddr += 2;			// Select next word in memory
    1d60:	4e 5f       	subi	r20, 0xFE	; 254
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	6f 4f       	sbci	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8a 2d       	mov	r24, r10
    1d6a:	8a 1b       	sub	r24, r26
    1d6c:	84 0d       	add	r24, r4
		size -= 2;			// Reduce number of bytes to write by two
		} 
	while (size);				// Loop until all bytes written
    1d6e:	11 f0       	breq	.+4      	; 0x1d74 <main+0x140>
	uint8_t *tmp = gBuffer;

	do 
		{
		data = *tmp++;
		data |= *tmp++ << 8;
    1d70:	2c 91       	ld	r18, X
    1d72:	e9 cf       	rjmp	.-46     	; 0x1d46 <main+0x112>
		baddr += 2;			// Select next word in memory
		size -= 2;			// Reduce number of bytes to write by two
		} 
	while (size);				// Loop until all bytes written

	boot_page_write(pagestart);
    1d74:	85 e0       	ldi	r24, 0x05	; 5
    1d76:	f6 01       	movw	r30, r12
    1d78:	80 93 57 00 	sts	0x0057, r24
    1d7c:	e8 95       	spm
	boot_spm_busy_wait();
    1d7e:	07 b6       	in	r0, 0x37	; 55
    1d80:	00 fc       	sbrc	r0, 0
    1d82:	fd cf       	rjmp	.-6      	; 0x1d7e <main+0x14a>
	boot_rww_enable();		// Re-enable the RWW section
    1d84:	00 93 57 00 	sts	0x0057, r16
    1d88:	e8 95       	spm

	return baddr>>1;
    1d8a:	db 01       	movw	r26, r22
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	b6 95       	lsr	r27
    1d90:	a7 95       	ror	r26
    1d92:	97 95       	ror	r25
    1d94:	87 95       	ror	r24
    1d96:	3c 01       	movw	r6, r24
    1d98:	93 c0       	rjmp	.+294    	; 0x1ec0 <main+0x28c>
			{
				if (val == 'F') 
				{
				address = writeFlashPage(address, size);
				} 
				else if (val == 'E') 
    1d9a:	95 34       	cpi	r25, 0x45	; 69
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <main+0x16c>
    1d9e:	90 c0       	rjmp	.+288    	; 0x1ec0 <main+0x28c>
    1da0:	20 e6       	ldi	r18, 0x60	; 96
    1da2:	e2 2e       	mov	r14, r18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	f2 2e       	mov	r15, r18
    1da8:	63 01       	movw	r12, r6
    1daa:	34 2c       	mov	r3, r4
    1dac:	3a 0c       	add	r3, r10
{
	uint8_t *tmp = gBuffer;

	do 
		{
		eeprom_write_byte( (uint8_t*)address, *tmp++ );
    1dae:	d7 01       	movw	r26, r14
    1db0:	6d 91       	ld	r22, X+
    1db2:	7d 01       	movw	r14, r26
    1db4:	c6 01       	movw	r24, r12
    1db6:	b2 d0       	rcall	.+356    	; 0x1f1c <eeprom_write_byte>
		address++;			// Select next byte
    1db8:	bf ef       	ldi	r27, 0xFF	; 255
    1dba:	cb 1a       	sub	r12, r27
    1dbc:	db 0a       	sbc	r13, r27
		size--;				// Decreas number of bytes to write
		}
	while (size);				// Loop until all bytes written
    1dbe:	3e 10       	cpse	r3, r14
    1dc0:	f6 cf       	rjmp	.-20     	; 0x1dae <main+0x17a>
    1dc2:	ef ef       	ldi	r30, 0xFF	; 255
    1dc4:	6e 1a       	sub	r6, r30
    1dc6:	7e 0a       	sbc	r7, r30
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	84 0d       	add	r24, r4
    1dcc:	68 0e       	add	r6, r24
    1dce:	71 1c       	adc	r7, r1
    1dd0:	77 c0       	rjmp	.+238    	; 0x1ec0 <main+0x28c>
			sendchar(0);
			}

		// Block read
		} 
		else if (val == 'g') 
    1dd2:	87 36       	cpi	r24, 0x67	; 103
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <main+0x1a4>
    1dd6:	3c c0       	rjmp	.+120    	; 0x1e50 <main+0x21c>
		{
			pagebuf_t size;
			size = recvchar() << 8;				// Load high byte of buffersize
    1dd8:	28 df       	rcall	.-432    	; 0x1c2a <recvchar>
			size |= recvchar();				// Load low byte of buffersize
    1dda:	27 df       	rcall	.-434    	; 0x1c2a <recvchar>
    1ddc:	f8 2e       	mov	r15, r24
			val = recvchar();				// Get memtype
    1dde:	25 df       	rcall	.-438    	; 0x1c2a <recvchar>

			if (val == 'F') 
    1de0:	86 34       	cpi	r24, 0x46	; 70
    1de2:	09 f5       	brne	.+66     	; 0x1e26 <main+0x1f2>
	return address;
}

static inline uint16_t readFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t baddr = (uint32_t)waddr<<1;
    1de4:	a3 01       	movw	r20, r6
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	2a 01       	movw	r4, r20
    1dec:	3b 01       	movw	r6, r22
    1dee:	44 0c       	add	r4, r4
    1df0:	55 1c       	adc	r5, r5
    1df2:	66 1c       	adc	r6, r6
    1df4:	77 1c       	adc	r7, r7
    1df6:	df 2c       	mov	r13, r15
    1df8:	d4 0c       	add	r13, r4
#warning "Bootloader not read-protected"

	#if defined(RAMPZ)
		data = pgm_read_word_far(baddr);
	#else
		data = pgm_read_word_near(baddr);
    1dfa:	f2 01       	movw	r30, r4
    1dfc:	e5 90       	lpm	r14, Z+
    1dfe:	f4 90       	lpm	r15, Z
		else 
		{
		data = 0xFFFF; // fake empty
		}
#endif
		sendchar(data);			// send LSB
    1e00:	8e 2d       	mov	r24, r14
    1e02:	0f df       	rcall	.-482    	; 0x1c22 <sendchar>
		sendchar((data >> 8));		// send MSB
    1e04:	8f 2d       	mov	r24, r15
    1e06:	0d df       	rcall	.-486    	; 0x1c22 <sendchar>
		baddr += 2;			// Select next word in memory
    1e08:	f2 e0       	ldi	r31, 0x02	; 2
    1e0a:	4f 0e       	add	r4, r31
    1e0c:	51 1c       	adc	r5, r1
    1e0e:	61 1c       	adc	r6, r1
    1e10:	71 1c       	adc	r7, r1
		size -= 2;			// Subtract two bytes from number of bytes to read
	} 
	while (size);				// Repeat until block has been read
    1e12:	d4 10       	cpse	r13, r4
    1e14:	f2 cf       	rjmp	.-28     	; 0x1dfa <main+0x1c6>
	return baddr>>1;
    1e16:	b3 01       	movw	r22, r6
    1e18:	a2 01       	movw	r20, r4
    1e1a:	76 95       	lsr	r23
    1e1c:	67 95       	ror	r22
    1e1e:	57 95       	ror	r21
    1e20:	47 95       	ror	r20
    1e22:	3a 01       	movw	r6, r20
    1e24:	4b cf       	rjmp	.-362    	; 0x1cbc <main+0x88>

			if (val == 'F') 
			{
			address = readFlashPage(address, size);
			} 
			else if (val == 'E') 
    1e26:	85 34       	cpi	r24, 0x45	; 69
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <main+0x1f8>
    1e2a:	48 cf       	rjmp	.-368    	; 0x1cbc <main+0x88>
    1e2c:	63 01       	movw	r12, r6
    1e2e:	e6 2c       	mov	r14, r6
    1e30:	ef 0c       	add	r14, r15

static inline uint16_t readEEpromPage(uint16_t address, pagebuf_t size)
{
	do 
	{
	sendchar( eeprom_read_byte( (uint8_t*)address ) );
    1e32:	c6 01       	movw	r24, r12
    1e34:	6b d0       	rcall	.+214    	; 0x1f0c <eeprom_read_byte>
    1e36:	f5 de       	rcall	.-534    	; 0x1c22 <sendchar>
	address++;
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	c8 1a       	sub	r12, r24
    1e3c:	d8 0a       	sbc	r13, r24
	size--;				// Decrease number of bytes to read
	} 
	while (size);				// Repeat until block has been read
    1e3e:	ec 10       	cpse	r14, r12
    1e40:	f8 cf       	rjmp	.-16     	; 0x1e32 <main+0x1fe>
    1e42:	af ef       	ldi	r26, 0xFF	; 255
    1e44:	6a 1a       	sub	r6, r26
    1e46:	7a 0a       	sbc	r7, r26
    1e48:	fa 94       	dec	r15
    1e4a:	6f 0c       	add	r6, r15
    1e4c:	71 1c       	adc	r7, r1
    1e4e:	36 cf       	rjmp	.-404    	; 0x1cbc <main+0x88>
			address = readEEpromPage(address, size);
			}

		// Chip erase
 		} 
		else if (val == 'e') 
    1e50:	85 36       	cpi	r24, 0x65	; 101
    1e52:	a9 f4       	brne	.+42     	; 0x1e7e <main+0x24a>
		{
		if (device == DEVTYPE) 
    1e54:	17 37       	cpi	r17, 0x77	; 119
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <main+0x226>
    1e58:	33 c0       	rjmp	.+102    	; 0x1ec0 <main+0x28c>
    1e5a:	e0 e0       	ldi	r30, 0x00	; 0
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) 
		{
		boot_page_erase(addr);		// Perform page erase
    1e5e:	20 92 57 00 	sts	0x0057, r2
    1e62:	e8 95       	spm
		boot_spm_busy_wait();		// Wait until the memory is erased.
    1e64:	07 b6       	in	r0, 0x37	; 55
    1e66:	00 fc       	sbrc	r0, 0
    1e68:	fd cf       	rjmp	.-6      	; 0x1e64 <main+0x230>
    1e6a:	e0 5c       	subi	r30, 0xC0	; 192
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255

static inline void eraseFlash(void)
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) 
    1e6e:	e1 15       	cp	r30, r1
    1e70:	bc e1       	ldi	r27, 0x1C	; 28
    1e72:	fb 07       	cpc	r31, r27
    1e74:	a1 f7       	brne	.-24     	; 0x1e5e <main+0x22a>
		{
		boot_page_erase(addr);		// Perform page erase
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
		}
	boot_rww_enable();
    1e76:	00 93 57 00 	sts	0x0057, r16
    1e7a:	e8 95       	spm
    1e7c:	21 c0       	rjmp	.+66     	; 0x1ec0 <main+0x28c>
			}
		sendchar('\r');

		// Exit upgrade
		} 
		else if (val == 'E') 
    1e7e:	85 34       	cpi	r24, 0x45	; 69
    1e80:	39 f4       	brne	.+14     	; 0x1e90 <main+0x25c>
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	a8 95       	wdr
    1e88:	91 bc       	out	0x21, r9	; 33
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	81 bc       	out	0x21, r8	; 33
    1e8e:	18 c0       	rjmp	.+48     	; 0x1ec0 <main+0x28c>
				}
			sendchar('\r');
		#endif
		// Enter programming mode
		} 
		else if (val == 'P') 
    1e90:	80 35       	cpi	r24, 0x50	; 80
    1e92:	b1 f0       	breq	.+44     	; 0x1ec0 <main+0x28c>
		{
		sendchar('\r');

		// Leave programming mode
		} 
		else if (val == 'L') 
    1e94:	8c 34       	cpi	r24, 0x4C	; 76
    1e96:	a1 f0       	breq	.+40     	; 0x1ec0 <main+0x28c>
		{
		sendchar('\r');
		// return programmer type
		} 
		else if (val == 'p') 
    1e98:	80 37       	cpi	r24, 0x70	; 112
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <main+0x26c>
		{
		sendchar('S');		// always serial programmer
    1e9c:	83 e5       	ldi	r24, 0x53	; 83
    1e9e:	34 c0       	rjmp	.+104    	; 0x1f08 <main+0x2d4>
			sendchar(read_fuse_lock(GET_EXTENDED_FUSE_BITS));
			#endif

		// Return device type
		} 
		else if (val == 't') 
    1ea0:	84 37       	cpi	r24, 0x74	; 116
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <main+0x278>
		{
		sendchar(DEVTYPE);
    1ea4:	87 e7       	ldi	r24, 0x77	; 119
    1ea6:	bd de       	rcall	.-646    	; 0x1c22 <sendchar>
		sendchar(0);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	2e c0       	rjmp	.+92     	; 0x1f08 <main+0x2d4>
		// clear and set LED ignored
		} 
		else if ((val == 'x') || (val == 'y')) 
    1eac:	98 e8       	ldi	r25, 0x88	; 136
    1eae:	98 0f       	add	r25, r24
    1eb0:	92 30       	cpi	r25, 0x02	; 2
    1eb2:	10 f4       	brcc	.+4      	; 0x1eb8 <main+0x284>
		{
		recvchar();
    1eb4:	ba de       	rcall	.-652    	; 0x1c2a <recvchar>
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <main+0x28c>
		sendchar('\r');

		// set device
		} 
		else if (val == 'T') 
    1eb8:	84 35       	cpi	r24, 0x54	; 84
    1eba:	21 f4       	brne	.+8      	; 0x1ec4 <main+0x290>
		{
		device = recvchar();
    1ebc:	b6 de       	rcall	.-660    	; 0x1c2a <recvchar>
    1ebe:	18 2f       	mov	r17, r24
		sendchar('\r');
    1ec0:	8d e0       	ldi	r24, 0x0D	; 13
    1ec2:	22 c0       	rjmp	.+68     	; 0x1f08 <main+0x2d4>
		// Return software identifier
		} 
		else if (val == 'S') 
    1ec4:	83 35       	cpi	r24, 0x53	; 83
    1ec6:	71 f4       	brne	.+28     	; 0x1ee4 <main+0x2b0>
}
#endif

static void send_boot(void)
{
	sendchar('A');
    1ec8:	81 e4       	ldi	r24, 0x41	; 65
    1eca:	ab de       	rcall	.-682    	; 0x1c22 <sendchar>
	sendchar('V');
    1ecc:	86 e5       	ldi	r24, 0x56	; 86
    1ece:	a9 de       	rcall	.-686    	; 0x1c22 <sendchar>
	sendchar('R');
    1ed0:	82 e5       	ldi	r24, 0x52	; 82
    1ed2:	a7 de       	rcall	.-690    	; 0x1c22 <sendchar>
	sendchar('B');
    1ed4:	82 e4       	ldi	r24, 0x42	; 66
    1ed6:	a5 de       	rcall	.-694    	; 0x1c22 <sendchar>
	sendchar('O');
    1ed8:	8f e4       	ldi	r24, 0x4F	; 79
    1eda:	a3 de       	rcall	.-698    	; 0x1c22 <sendchar>
	sendchar('O');
    1edc:	8f e4       	ldi	r24, 0x4F	; 79
    1ede:	a1 de       	rcall	.-702    	; 0x1c22 <sendchar>
	sendchar('T');
    1ee0:	84 e5       	ldi	r24, 0x54	; 84
    1ee2:	12 c0       	rjmp	.+36     	; 0x1f08 <main+0x2d4>
		{
		send_boot();

		// Return Software Version
		} 
		else if (val == 'V') {
    1ee4:	86 35       	cpi	r24, 0x56	; 86
    1ee6:	21 f4       	brne	.+8      	; 0x1ef0 <main+0x2bc>
		sendchar(VERSION_HIGH);
    1ee8:	80 e3       	ldi	r24, 0x30	; 48
    1eea:	9b de       	rcall	.-714    	; 0x1c22 <sendchar>
		sendchar(VERSION_LOW);
    1eec:	88 e3       	ldi	r24, 0x38	; 56
    1eee:	0c c0       	rjmp	.+24     	; 0x1f08 <main+0x2d4>

		// Return Signature Bytes (it seems that 
		// AVRProg expects the "Atmel-byte" 0x1E last
		// but shows it first in the dialog-window)
		} 
		else if (val == 's') 
    1ef0:	83 37       	cpi	r24, 0x73	; 115
    1ef2:	31 f4       	brne	.+12     	; 0x1f00 <main+0x2cc>
		{
		sendchar(SIG_BYTE3);
    1ef4:	87 e0       	ldi	r24, 0x07	; 7
    1ef6:	95 de       	rcall	.-726    	; 0x1c22 <sendchar>
		sendchar(SIG_BYTE2);
    1ef8:	83 e9       	ldi	r24, 0x93	; 147
    1efa:	93 de       	rcall	.-730    	; 0x1c22 <sendchar>
		sendchar(SIG_BYTE1);
    1efc:	8e e1       	ldi	r24, 0x1E	; 30
    1efe:	04 c0       	rjmp	.+8      	; 0x1f08 <main+0x2d4>

		/* ESC */
		} 
		else if(val != 0x1b) 
    1f00:	8b 31       	cpi	r24, 0x1B	; 27
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <main+0x2d2>
    1f04:	db ce       	rjmp	.-586    	; 0x1cbc <main+0x88>
		{
		sendchar('?');
    1f06:	8f e3       	ldi	r24, 0x3F	; 63
    1f08:	8c de       	rcall	.-744    	; 0x1c22 <sendchar>
    1f0a:	d8 ce       	rjmp	.-592    	; 0x1cbc <main+0x88>

00001f0c <eeprom_read_byte>:
    1f0c:	e1 99       	sbic	0x1c, 1	; 28
    1f0e:	fe cf       	rjmp	.-4      	; 0x1f0c <eeprom_read_byte>
    1f10:	9f bb       	out	0x1f, r25	; 31
    1f12:	8e bb       	out	0x1e, r24	; 30
    1f14:	e0 9a       	sbi	0x1c, 0	; 28
    1f16:	99 27       	eor	r25, r25
    1f18:	8d b3       	in	r24, 0x1d	; 29
    1f1a:	08 95       	ret

00001f1c <eeprom_write_byte>:
    1f1c:	26 2f       	mov	r18, r22

00001f1e <eeprom_write_r18>:
    1f1e:	e1 99       	sbic	0x1c, 1	; 28
    1f20:	fe cf       	rjmp	.-4      	; 0x1f1e <eeprom_write_r18>
    1f22:	9f bb       	out	0x1f, r25	; 31
    1f24:	8e bb       	out	0x1e, r24	; 30
    1f26:	2d bb       	out	0x1d, r18	; 29
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	e2 9a       	sbi	0x1c, 2	; 28
    1f2e:	e1 9a       	sbi	0x1c, 1	; 28
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	08 95       	ret

00001f36 <_exit>:
    1f36:	f8 94       	cli

00001f38 <__stop_program>:
    1f38:	ff cf       	rjmp	.-2      	; 0x1f38 <__stop_program>
